{
  "name": "one",
  "version": "2.5.2",
  "description": "Transform NodeJS packages into single stand-alone script files.",
  "author": {
    "name": "Azer Koculu",
    "email": "azer@kodfabrik.com"
  },
  "keywords": [
    "commonjs",
    "browser"
  ],
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib",
  "bin": {
    "onejs": "./bin/onejs"
  },
  "dependencies": {
    "functools": "1.x",
    "optimist": "0.x",
    "hogan.js": "2.x",
    "glob": "*",
    "debug": "*",
    "flatten-array": "*",
    "boxcars": "*"
  },
  "devDependencies": {
    "highkick": "1.x"
  },
  "scripts": {
    "test": "highkick test/index"
  },
  "readme": "OneJS is a command-line utility for converting CommonJS packages to single, stand-alone JavaScript\nfiles that can be run on web browsers.\n\n```bash\n$ one > browser.js\n```\n\n![](https://dl.dropbox.com/s/r29fc29iip3mj8u/onejs.jpg)\n\n# DOCUMENTATION\n* [Install](#install)\n* [First Steps](#first-steps)\n* [Advanced Usage](#advanced-usage)\n    * [Saving Multiple Files & Async Loading](#multiple)\n    * [Watching File Changes](#watching)\n    * [Package Aliases](#alias)\n    * [Accessing Global Browser Variables](#global-vars)\n    * [Excluding Packages](#exclude)\n    * [Filtering Modules](#filter)\n    * [Customizing Global Name](#customize-name)\n* [API Reference](#api)\n    * [Command-Line API](#cli)\n    * [NodeJS API](#nodejs)\n    * [package.json](#packagejson)\n* [Examples](#examples)\n* [Troubleshooting](#troubleshooting)\n* [Testing](#testing)\n\n<a name=\"install\"></a>\n## Install\n```bash\n$ npm install -g one\n```\n\n<a name=\"first-steps\"></a>\n# First Steps\n\nThe quickest way of giving OneJS a try is to run \"onejs build package.json\" command in a project folder. It'll walk through all the directories, find\nJavaScript files in the \"lib\" folder (if exists, and by considering .npmignore), and produce an output that can be run by any web browser and NodeJS, as well.\n\nBundle files produced by OneJS consist of a CommonJS implementation and the throughout package tree wrapped by [OneJS' templates](https://github.com/azer/onejs/tree/master/templates/dynamic).\nAnd the produced output will be unobtrusive. Which means, your project will not conflict with any other JavaScript on the page that is embedded.\n\nOnce you produce the output, as you expect, it needs to be included by an HTML page, like the below example;\n\n```bash\n$ one build hello-world/package.json output.js\n$ cat > index.html\n<html>\n    <script src=\"output.js\"></script>\n    <script>helloWorld();</script>\n</html>\n```\n\nYou may notice a function named `helloWorld` was called. That's what starts running your program by requiring the `main` module of the project.\nBesides of that `helloWorld` refers to the main module, it also exports some utilities that can be useful. See following for an example;\n\n```js\n> helloWorld.require('./module');\n[object ./module.js]\n> helloWorld.require('dependency');\n[object node_modules/dependency]\n```\n\nIn addition to command-line API, there are two more ways to configure build options. You can have the configuration in a package.json manfest;\n\n```json\n{\n    \"name\": \"hello-world\",\n    \"version\": \"1.0.0\",\n    \"directories\": {\n        \"lib\": \"lib\"\n    },\n    \"web\": {\n        \"save\": \"bundle.js\",\n        \"alias\": {\n            \"crypto\": \"crypto-browserify\"\n        },\n        \"tie\": {\n            \"jquery\": \"window.jQuery\"\n        }\n    }\n}\n```\n\nOr, you can write your own build script using OneJS' [chaining API](https://github.com/azer/onejs/blob/master/lib/chaining.js):\n\n```js\n// build.js\nvar one = require('../../../lib');\n\none('./package.json')\n    .alias('crypto', 'crypto-browserify')\n    .tie('pi', 'Math.PI')\n    .tie('json', 'JSON')\n    .exclude('underscore')\n    .filter(/^build\\.js$/)\n    .filter(/^bundle\\.js$/)\n    .save('bundle.js');\n```\n\n<a name=\"advanced-usage\"></a>\n## Advanced Usage\n\n<a name=\"multiple\"></a>\n### Saving Multiple Files & Async Loading\n\nSpecified dependencies (including their subdependencies) can be splitted to different files via `package.json` manifest.\n\n```json\n{\n    \"name\": \"hello-world\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n        \"foo\": \"*\",\n        \"bar\": \"*\"\n    },\n    \"web\": {\n        \"save\": {\n            \"hello-world\": \"hello-world.js\",\n            \"bar\": {\n                \"to\": \"bar.js\",\n                \"url: \"/js/bar.js\"\n            }\n        }\n    }\n}\n```\n\nOneJS will be outputting an async require implementation to let you load splitted packages;\n\n```js\n// hello-world/index.js\nvar foo = require('foo');\n    \nrequire.async('bar', function(bar)){ // loads \"/js/bar.js\"\n   console.log('dependencies are loaded!');     \n   console.log(bar);\n   // => [object bar]\n});\n```\n\n<a name=\"watching\"></a>\n### Watching File Changes\n\nOneJS doesn't have a watching utility since a built-in one becomes useless when you have other build steps.\n\nRecommended way is to create a Makefile, and use the good tools such as [visionmedia/watch](https://github.com/visionmedia/watch)  to\n, [isaacs/node-supervisor](https://github.com/isaacs/node-supervisor) build your project when there is a change. Following Makefile example watches files under /lib directory.\n\n```make\nSRC = $(wildcard lib/*/*.js)\n\nbuild: $(SRC)\n   @one build package.json bundle.js\n```\n\nBelow command will be updating `bundle.js` when `lib/` has a change.\n\n```bash\n$ watch make\n```\n\n<a name=\"alias\"></a>\n### Package Aliases\n\nRegisters a new name for specified package. It can be configured via command-line, package.json and NodeJS APIs. \n\n```bash\n$ one build package.json output.js --alias request:superagent,crypto:crypto-browserify\n```\n\npackage.json\n```json\n{\n    \"name\": \"hello-world\",\n    \"web\": {\n        \"alias\": {\n            \"crypto\": \"crypto-browserify\"\n        }\n    }\n}\n```\n\nNodeJS\n```js\none('./package.json')\n    .alias('crypto', 'crypto-browserify')\n    .save('foo.js');\n```\n\n<a name=\"global-vars\"></a>\n### Accessing Global Browser Variables\n\nOneJS doesn't stop you from accessing globals. However, you may want to use `require` for accessing some global variables, \nsuch as jQuery, for some purposes like keeping your source-code self documented. \n\nOneJS may tie some package names to global variables if demanded. And it can be configured via command-line, package.json and NodeJS APIs.\n\n```bash\n$ one build package.json output.js --tie jquery:jQuery,google:goog\n```\n\npackage.json\n```json\n{\n    \"name\": \"hello-world\",\n    \"web\": {\n        \"tie\": {\n            \"jquery\": \"jQuery\",\n            \"google\": \"goog\"\n        }\n    }\n}\n```\n\nNodeJS\n```js\none('./package.json')\n    .tie('jquery', 'jQuery')\n    .tie('google', 'goog')\n    .save('foo.js');\n```\n\n<a name=\"exclude\"></a>\n### Excluding Packages\n\nExcludes specified packages from your bundle.\n\n```bash\n$ one build package.json output.js --excude underscore\n```\n\npackage.json\n```json\n{\n    \"name\": \"hello-world\",\n    \"web\": {\n        \"exclude\": [\"underscore\"]\n    }\n}\n```\n\nNodeJS\n```js\none('./package.json')\n    .exclude('underscore')\n    .save('foo.js');\n```\n\n<a name=\"filter\"></a>\n### Filtering Modules/Files\n\nOneJS reads .npmignore to ignore anything not wanted to have in the bundle. In addition to .npmignore, you may also\ndefine your own Regex filters to ignore files. This config is only provided for only NodeJS scripts.\n\n```js\none('./package.json')\n    .filter(/^build\\.js$/)\n    .filter(/^bundle\\.js$/)\n    .save('bundle.js');\n```\n\n<a name=\"add-deps\"></a>\n### Additional Dependencies\n\nYou may add some dependencies not defined in your package.json;\n\n```js\none('./package.json')\n   .dependency('request', '2.x')\n   .dependency('async', '2.x')\n   .save(function(error, bundle){\n      \n      bundle\n      // => the source code\n      \n   })\n```\n<a name=\"dev-deps\"></a>\n### Enabling Development Dependencies\n\n```js\none('./package.json')\n   .devDependencies()\n   .save('bundle.js')\n```\n\n<a name=\"customize-name\"></a>\n### Customizing Global Variable\n\nOneJS defines the global variable that wraps the bundle by default. For example, a project named \"hello-world\" lies\nunder \"helloWorld\" object on the browsers.\n\nTo customize it, define \"name\" field on your package.json;\n\n```json\n{\n    \"name\": \"hello-world\",\n    \"web\": {\n        \"name\": \"HelloWorld\"\n    }\n}\n```\n\n<a name=\"api\"></a>\n## API Reference\nOneJS lets you pick any of the following ways to configure your build. \n\n<a name=\"packagejson\"></a>\n### package.json\n\n```json\n{\n    \"name\": \"hello-world\",\n    \"version\": \"1.0.0\",\n    \"directories\": {\n        \"lib\": \"lib\"\n    },\n    \"web\": {\n        \"name\":\"HelloWorld\",\n        \"save\": \"bundle.js\",\n        \"alias\": {\n            \"crypto\": \"crypto-browserify\"\n        },\n        \"tie\": {\n            \"jquery\": \"window.jQuery\"\n        }\n    }\n}\n```\n\n<a name=\"cli\"></a>\n### Command-Line\n\n```bash\nusage: onejs [action] [manifest] [options]\n\nTransforms NodeJS packages into single, stand-alone JavaScript files that can be run at other platforms. See the documentation at http://github.com/azer/onejs for more information.\n\nactions:\n  build      <manifest> <target>          Generate a stand-alone JavaScript file from specified package. Write output to <target> if given any.\n  server     <manifest> <port> <host>     Publish generated JavaScript file on web. Uses 127.0.0.1:1338 by default.\n\noptions:\n  --debug                                 Enable SourceURLs.\n\n  --alias <alias>:<package name>          Register an alias name for given package. e.g: request:superagent,crypto:crypto-browserify\n  --tie <package name>:<global object>    Create package links to specified global variables. e.g; --tie dom:window.document,jquery:jQuery\n  --exclude <package name>                Do not contain specified dependencies. e.g: --exclude underscore,request \n  --plain                                 Builds the package within a minimalistic template for the packages with single module and no dependencies.\n\n  --quiet                                 Make console output less verbose.\n  --verbose                               Tell what's going on by being verbose.\n  --version                               Show version and exit.\n  --help                                  Show help.\n```\n\n<a name=\"nodejs\"></a>\n### NodeJS\n\n```js\n// build.js\nvar one = require('../../../lib');\n\none('./package.json')\n    .alias('crypto', 'crypto-browserify')\n    .tie('pi', 'Math.PI')\n    .tie('json', 'JSON')\n    \n    .include('optional-module.js')\n    .dependency('optional-dependency', '2.x')\n    .exclude('underscore')\n    \n    .filter(/^build\\.js$/)\n    .filter(/^bundle\\.js$/)\n    \n    .devDependencies()\n   \n    .name('helloKitty')\n    .save('bundle.js'); // or .save(function(error, bundle){  })\n```\n\n\n## Examples\n// Following examples are out of date. Will be updated soon.\n\n* [Fox](https://github.com/azer/fox/blob/master/lib/browser.js#L19)\n* See the example project included in this repository\n* MultiplayerChess.com ([Source Code](https://github.com/azer/multiplayerchess.com/tree/master/frontend) - [Output](http://multiplayerchess.com/mpc.js) )\n* [ExpressJS built by OneJS](https://gist.github.com/2415048)\n* [OneJS built by OneJS](https://gist.github.com/2998719)\n\n# Troubleshooting\n\n* The most common issue is to lack some dependencies. In that case, make sure that the missing dependency is located under `node_modules/` properly.\n* Enabling verbose mode might be helpful: `onejs build package.json --verbose`\n* See the content of `projectName.map` object if it contains the missing dependency\n\n# TESTING\n\nRun `npm test` for running all test modules. And run `make test module=?` for specific test modules;\n\n```bash\n> make test module=build\n```\n",
  "readmeFilename": "README.md",
  "_id": "one@2.5.2",
  "dist": {
    "shasum": "b3f644a3b2393c4307fc10b0203513a7a9e2f039"
  },
  "_from": "one@2.X.X",
  "_resolved": "https://registry.npmjs.org/one/-/one-2.5.2.tgz"
}
